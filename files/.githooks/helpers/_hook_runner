#! /bin/bash
#
# Usage: ./_hook_runner <name-of-hook> <git-arg1> ... <git-argN>

# Process args
hook_name=$1
shift

################################################################################
# Default checks ###############################################################
################################################################################
# Get path to corresponding local hook
local_hook_path=$(eval "$(dirname $0)/_find_local_hook ${hook_name}")
# Check if this hook should be run, or just the local one
run_global_hook=$(eval "$(dirname $0)/_run_global_hook ${local_hook_path}")


################################################################################
# Run global hook ##############################################################
################################################################################
if [[ "${run_global_hook}" -eq 1 ]]; then
    # If script exists, source it to get _run function, and run it.
    # Otherwise, do nothing.
    hook_script=$(realpath "$(dirname $0)/../hooks.d/${hook_name}")
    if [[ -f "${hook_script}" ]]; then
        source "${hook_script}"
        _run "$@"
    fi
fi


################################################################################
# Run local hook ###############################################################
################################################################################
if [[ -n "${local_hook_path}" ]]; then
    eval "${local_hook_path} $@"
fi
