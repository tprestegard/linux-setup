#! /usr/bin/env bash

# Functions -------------------
# UWM VPN
#oc() { sudo openconnect -u prestega --juniper vpn.uwm.edu -b --no-cert-check; }
oc() { sudo /usr/sbin/openconnect -u prestega --juniper vpn.uwm.edu --script /etc/vpnc/vpnc-script; }
export -f oc

# SSH functions ---------------
# Raspberry Pi
rpi() { ssh -YA 192.168.1.14; }

# Zach website
knock() { ssh -YA knockdownfirearms.com; }
export -f knock

# DUGL computer
dugl() { ssh -YA 204.114.29.10; }
export -f dugl

# UMN physics computers.
luts() { ssh -YA lutsen.spa.umn.edu; }
matt() { ssh -YA matterhorn.spa.umn.edu; }
export -f luts matt

# LIGO computers
ligo_setup() { source ${HOME}/bin/ligo-setup.sh; }
pcdev() { ligo_setup; gsissh -YA ldas-pcdev$1.ligo.caltech.edu; }
pcgrid() { ligo_setup; gsissh -YA ldas-grid.ligo.caltech.edu; }
atlas() { ligo_setup; gsissh -YA atlas$1.atlas.aei.uni-hannover.de; }
titan() { ligo_setup; gsissh -YA titan$1.atlas.aei.uni-hannover.de; }
lho() { ligo_setup; gsissh -YA ldas-pcdev$1.ligo-wa.caltech.edu; }
llo() { ligo_setup; gsissh -YA ldas-pcdev$1.ligo-la.caltech.edu; }
uwm() { ligo_setup; gsissh -YA pcdev$1.phys.uwm.edu; }
sugar() { ligo_setup; gsissh -YA sugar-dev2.phy.syr.edu; }
emfollow() { ligo_setup; gsissh -YA emfollow.ligo.caltech.edu; }
export -f ligo_setup pcdev pcgrid atlas titan lho llo uwm sugar emfollow

# UWM computers
gdb () {
    host="gracedb"
    if [[ "$#" -eq 0 ]]; then
        host+=".cgca"
    elif [[ "$#" -eq 1 ]]; then
        host+="-$1.cgca"
    elif [[ "$#" -eq 2 ]]; then
        host+="-$1.$2"
    else
        echo "ERROR: takes 0, 1, or 2 arguments."
        return
    fi
    ssh -YA ${host}.uwm.edu;
}
sdb() { ssh -YA simdb.cgca.uwm.edu; }
lva() { ssh -YA lvalert.cgca.uwm.edu; }
lva-test() { ssh -YA lvalert-test.cgca.uwm.edu; }
ligo-rm() { ssh -YA ligo-rm.phys.uwm.edu; }
dashboard() { ssh -YA dashboard.cgca.uwm.edu; }
cgca() { ssh -YA $1.cgca.uwm.edu; } # generic function for any cgca.uwm.edu machine
export -f gdb sdb lva lva-test ligo-rm dashboard cgca
# NEMO computers
uwmpcdev() { ligo_setup; gsissh -YA pcdev$1.phys.uwm.edu; }
export -f uwmpcdev
# Sandboxes
webhook() { ssh -YA webhook-test.cgca.uwm.edu; }
eah() { ssh -YA eah-d8-dev.cgca.uwm.edu; }
export -f webhook eah

# Other useful functions -------------------------------------------------
# make a directory and go to it.
mkdircd() { mkdir -p -- "$1" && cd -P -- "$1"; }
# cd, then ls.
cdls() {
    if [[ "$#" -eq 1 ]]; then
        cd -P -- "$1" && ls
    elif [[ "$#" -eq 2 ]]; then
        cd -P -- "$2" && ls "$1" -- "$2"
    else
        echo "cdls USAGE: cdls [directory]."
        echo "            cdls [ls opts] [directory]."
    fi
}
# cd up some number of levels.
cdu() {
    # Handle args
    if [[ "$#" -gt 1 ]]; then
        echo "cdu USAGE: cdu [num], where [num] is an integer."
        return
    fi

    if [[ "$#" -eq 0 ]]; then
        NUMLVL=1
    else
        if [[ "$1" -lt 1 ]]; then
            NUMLVL=1
        else    
            NUMLVL=$1
        fi
    fi

    # Check depth
    CUR_DEPTH=$(pwd | grep -o "/" | wc -l)
    if [[ "${CUR_DEPTH}" -lt "${NUMLVL}" ]]; then
        echo -n "WARNING: current filesystem depth is ${CUR_DEPTH}, less than "
        echo "requested level change. Going up ${CUR_DEPTH} directories."
        NUMLVL=${CUR_DEPTH}
    fi

    # Build command
    CMD="cd "
    while [[ ${NUMLVL} > 0 ]]; do
        CMD=${CMD}"../"
        let NUMLVL=${NUMLVL}-1
    done

    # Evaluate  
    eval ${CMD}
}
# Swap the names of two files
fileswap() {
    if [[ "$#" -ne 2 ]]; then
        echo "fileswap USAGE: fileswap [file1] [file2]"
    fi

    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE "$2"
}
export -f mkdircd cdls cdu fileswap
